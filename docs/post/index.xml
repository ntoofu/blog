<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on ntoofu</title>
    <link>https://ntoofu.github.io/blog/post/</link>
    <description>Recent content in Posts on ntoofu</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>&amp;copy; 2018 ntoofu</copyright>
    <lastBuildDate>Fri, 04 Jan 2019 00:17:21 +0900</lastBuildDate>
    
	<atom:link href="https://ntoofu.github.io/blog/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Container Network Interfaceについて調べた</title>
      <link>https://ntoofu.github.io/blog/post/container-network-interface/</link>
      <pubDate>Wed, 16 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ntoofu.github.io/blog/post/container-network-interface/</guid>
      <description>社内のKubernetes勉強会で, 前より関心のあった Container Network Interface (CNI) の説明を することになった。その際の資料をここに書いておく。
Container Network Interface (CNI) の基本 CNIとは何か  Linux container内のnetwork interfaceを設定するプラグインを書くための 仕様とライブラリからなるCNCFプロジェクト containerのネットワーク接続性を作ることと削除時の後始末だけを考えているため, 仕様は単純でサポート状況も良い(k8s専用というわけでもない) GitHub  CNIが生まれてきた背景  Linux containerが急速に発展しcontainer runtimeやオーケストレータが複数出てきた 環境依存しやすいネットワーク周りをplugableにする方法は確立されていなかった それぞれが独自に問題を解決する無駄を避けるべく, CNIが共通のインターフェイスを定める  元はと言えば rkt 用に考えられたものらしい   CNI plugins  CNIに準拠したpluginはたくさんあり, READMEにも書いてある Golangで書かれたものは多いが, CNIは言語については規定していないため何で書いても良い  CNI仕様  SPEC.mdに仕様が記されている CNI からすれば container = Linux network namespace (netns) (runtimeによりnetnsを作る単位が異なるが, CNIとしてはcontainer = network namespaceとみなす)  そもそも, Linux containerから見えるネットワークインターフェイスは コンテナ用のnetns内のinterfaceでしかない  &amp;ldquo;network&amp;rdquo; ごとに, どのpluginを用いるかなどの設定をCNIが定めるJSON形式で用意する  name: host内で一意な, networkを表す名前 type: そのnetworkで使うCNI pluginの実行ファイル名を指定 cniVersion: CNI specのバージョン ipam: I/FへのIPアドレス割り当てを管理するIPAM pluginの設定 dns: container(netns)に対するDNSを設定する その他, plugin固有の設定 (e.</description>
    </item>
    
    <item>
      <title>git-annex によるファイル管理を試した</title>
      <link>https://ntoofu.github.io/blog/post/git-annex/</link>
      <pubDate>Mon, 07 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ntoofu.github.io/blog/post/git-annex/</guid>
      <description>LWN.netの記事 で git-annex について知ったのでちょっと試してみた。
git-annex  LWN.netの記事もそうであるように, Gitで巨大なファイルを管理する際に git-lfsと並んで名前があがることがある 大きなファイルに限らず, ファイルの実体とバージョン管理を分離することができる ユースケースについては git-annex の説明を 読むのがわかり易い  例1: バックアップ・アーカイブ用途 例2: キャッシュ的な用途（クラウドストレージにあるデータをリムーバブルメディアに持ってきて 利用した後, 書き戻す）  柔軟な制御は出来る反面面倒な部分が多い  実体の置き場を複数に分散させられるので, 分散ストレージもどきっぽくできる  置き場にはクラウドストレージ等も利用可能  保持しておくべき実体のコピーの数とかも指定できる（バックアップ用途に便利） 実体が手元にあるかないか気にする必要があるが, 裏を返せば実体は必要なものだけ持つこともできる バージョン管理はgitの流儀に従って都度自分で行うか自動でやる仕組みを整える必要がある  cronジョブを仕込むとか   ホスティングサービスの対応は薄い  GitLabでは対応を打ち切られている  ちなみに haskell で書かれている模様  検証のモチベーション  デスクトップ, ラップトップ, モバイルのデータ共有に使えないか 以下のような運用を実現したい  デスクトップは常にアクセスできるNFS上のデータにアクセスするようにしておきたい NFS上のデータは適宜クラウドストレージ(Google Drive)にバックアップとしてデータをコピーしておきたい ラップトップは自宅ではNFSのデータを使いつつ, 外出先ではローカルのデータを使い, もしローカルに無い場合はクラウドストレージからデータを持ってくるようにする  ローカルの容量が小さいので, 必要なデータだけを持ってきたい  モバイル(iOS)から参照が必要なものは都度クラウドストレージから読み出しつつ, 撮った写真とかはクラウドストレージにアップロードする  gdriveなどでrsyncライクに同期を取ることはやっていたが, 気になる部分があってやめていた  同期忘れで並行して変更が発生してしまい不整合が出たら嫌 NFSを使っている関係で書き換え発生時に自動的に同期することが出来ない   試してわかったこと 公式にwalkthroughがあるので, 参考にして色々試しつつ動きを確認した。</description>
    </item>
    
    <item>
      <title>GitHub Pagesの利用を再開した</title>
      <link>https://ntoofu.github.io/blog/post/github-pages/</link>
      <pubDate>Sun, 06 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ntoofu.github.io/blog/post/github-pages/</guid>
      <description>元々GitHub Pagesを使ってコンピュータ関連の技術系のブログ（所謂技術ブログ）を公開しようと 1年ぐらい前にやっていて、実際Jekyllで書けるようにするところまではやっていた。 が、特に何も書かずに放置してしまっていたので、整備し直すついでにHugoに乗り換えた。 （markdownのドキュメントをHugoでHTMLにして見るようにするということを業務でやっていて、 両方を触るのが面倒だったため）
大事なのは記事をちゃんと書くことで、今までは何か書くことが出来たらーという気持ちで 構えていたのが良くなかったなと思う。これ以上やることはないというぐらいに やり尽くしたり学び尽くすなどという事は大体の事柄に対してあり得ないので、 やりきってから書くつもりだと中々その時が訪れない。 最低月1つは何か書くことにする。
また、調べたことをまとめて記事にすることも当初は考えていたが、いざとなると 「自分もネットで調べて知識を得ているのだから、まとめて書いたところで新規性も無いただの劣化コピーになるだけ」 と思ってしまい書く気にならなかった。 しかし、GitHub Pagesで書いてサクッと公開するぐらいならSEO的にもそんなに人目に触れないと思うので、 本当に私的なメモを（見ようと思えば）誰にでも見れる場所に置いているだけ、という気持ちで取り組もうと思う。
しょうもない事を長々書いたが、基本的には何かしら技術に関する話題を含む記事を今後定期的に書いていきたいと思う。</description>
    </item>
    
  </channel>
</rss>